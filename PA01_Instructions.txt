This programming assignment involves 2D matrix/array and vector computations.

Please read the instruction carefully. There are three parts for this assignment.

The assignment will be turned in on Canvas here in one zip file. The zip file should
include the code, documentation, and all output files. The documentation should include
the program description (including what happens in the marginal cases, e.g., invalid inputs
or computations) and pseudocode.



[On 07072021: Updates on Part 3 include i) the class-common-input  test file upload
("class_p3_input.txt") and ii) the clarification about the orthogonal projection
("For orthogonal projection (PR), take the first vector and project onto the second
vector, e.g., in lecture slides for orthogonal projection in Ch. 2, the first vector
is w while the second vector is v.").]



Part 1) Write a program using a 2D array (i.e., 2D matrices) that generates
and writes out five matrices defined as follows. The values in these initial Matrices
must be generated by the program and not hard-coded.

The matrices should have dimensions as follows:

Mat1: Number of Rows = Number of Letters in your first name; Number of Columns = Number of
Letters in your last name;

Starting at index position (0,0) begin filling Mat1 with values starting at 1 and increasing
by 1 each time as you iterate the indices over the columns first, then over rows second.
Mat2: Number of Rows = Number of Letters in your last name; Number of Columns = Number of
Letters in your first name;

Starting at index position (0,0) begin filling Mat2 with values starting at 2 and increasing
by 3 each time as you iterate the indices over the rows first, then over columns second.
Mat3: Number of Rows = Number of Letters in your last name; Number of Columns = Number of
Letters in your first name;

Starting at index position (0,0) begin filling Mat3 with values starting at 0.6 and increasing
by 0.2 each time as you iterate the indices over the rows first, then over columns second.
Mat4: Number of Rows = 5, number of Columns = 9

Starting at index position (0,0) begin filling Mat4 with values starting at 3 and increasing
by 2 each time as you iterate the indices over the rows first, then over columns second.
Mat5: Numbers of Rows = 5, number of Columns = 9

Starting at index position (0,0) begin filling Mat5 with values starting at -7 and increasing
by 1 each time as you iterate the indices over the columns first, then over rows second.
The program should be named “name_p1”, and it should write the output to files of the format:
“name_p1_mat1.txt”, “name_p1_mat2.txt”, "name_p1_mat2.txt” , “name_p1_mat3.txt”… etc. The
“name” here is the initial/first letter of your first name and your full last name; for
example, Prof Sang-Yoon Chang’s first file would be named “schang_p1_mat1.txt”, and Andrew
White’s first file would be “awhite_p1_mat1.txt”.

An example of incrementing by 1 and iterating over the columns first and then over the rows
is given :

1 2 3 4 5

6 7 8 9 10

11 12 13 14 15

16 17 18 19 20

21 22 23 24 25

Your output file should include a 2D matrix of the same format and be human readable as a
text file.





Part 2a) Let’s use the 2D matrices generated in Part 1. Write a program named “name_p2a”
(based on the same naming scheme from the previous part), which will take the filenames for
2 distinct input matrices, say A and B (where A and B are different matrices), and an output
filename. The program will read in the matrices from those two files and then compute and
write A+B to the output file (i.e., the element-wise sum of the two matrices/arrays, or
output an error message/indicator if it is not possible).

Test this with all possible combination of the five matrices generated in Part 1, producing
files of the format “name_p2a_out12.txt”, ”name_p2a_out13.txt”, … etc, where the two digits
specify which of the inputs were used to produce that output.



Part 2b) Write a program named “name_p2b”, which will take two distinct input matrices,
say A and B, and output the matrix multiplication. The program will read in the matrices
from the two files and then compute and write A*B to the output file.

Test this with all possible combination of the five matrices generated in Part 1, producing
files of the format “name_p2b_out12.txt”, ”name_p2b_out13.txt”, … etc, where the two digits
specify which of the inputs were used to produce that output.





Part 3) Let’s build a calculator supporting the following calculations for 2D vectors:
addition (AD), subtraction (SU), scaling (SC), dot product (DO), and orthogonal projection
(PR). For scaling (SC), take the magnitude of the first vector and multiply that with the
second vector. For orthogonal projection (PR), take the first vector and project onto the
second vector, e.g., in lecture slides for orthogonal projection in Ch. 2, the first vector
is w while the second vector is v.

Write a program generating the input and the output files of the 2D calculator.

The input file should be named “name_p3_input” where “name” follows the same naming rule as
before (the first letter of your last name and your full last name). Each row of the input
corresponds to a calculation and includes: two letters (the calculation mode) and four numbers
(the two components of the first vector and the two components of the second vector).

For example, the following input file involves two calculations (addition and dot product)
using the same two vectors ([2.2,0.3] and [-1,0]):

AD 2.2 0.3 -1 0

DO 2.2 0.3 -1 0

Your output file should be named “name_p3_output” which has the same number of rows as the
corresponding input file and have one or two numbers or an error message for each row
depending on the calculation mode.

[From last week: You will also be given a class input file next week ("class_p3_input”) and
be asked to generate the output for that (name it "class_p3_output”). It will be posted here
on Canvas.]

The following is the text file for your solution submission. In addition to your unique
“name_p3_input” and “name_p3_output” files, please include the  "class_p3_input” and
"class_p3_output” files in your submission. class_p3_input.txt  Download class_p3_input.txt